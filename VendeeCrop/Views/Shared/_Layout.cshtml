
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0,maximum-scale=1, user-scalable=no, minimal-ui">
    <title>@ViewBag.Title - My ASP.NET Application</title>
    @Styles.Render("~/Content/css")
    @Scripts.Render("~/bundles/modernizr")
    @Scripts.Render("~/bundles/jquery")
    @Scripts.Render("~/bundles/bootstrap")
    @RenderSection("scripts", required: false)
    <script src="~/Scripts/jquery.signalR-2.2.2.min.js"></script>
    <script src="~/signalr/hubs"></script>

</head>
<body class="body-home">
    <div class="navbar navbar-inverse navbar-fixed-top">
        <div class="container">
            <div class="navbar-header">
                <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse">
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                </button>
                @if (Session["UserModel"] != null || Request.IsAuthenticated)
                {
                    @Html.ActionLink("Vendee Crop", "Index", "Home", new { area = "" }, new { @class = "navbar-brand" })
                    <a id="amessleft" class="navbar-brand" href="@Url.Action("Messages","Home")"><i id="lblmessage" class="glyphicon glyphicon-envelope"></i><span id="lblMessageCountLeft" class="hidden">0</span></a>
                    <a id="anotileft" class="navbar-brand" href="#"><i id="lblnotification" class="glyphicon glyphicon-bell"></i><span id="lblNotificationCountLeft" class="hidden">0</span></a>
                }
                else
                {
                    @Html.ActionLink("Vendee Crop", "LoginIndex", "Home", new { area = "" }, new { @class = "navbar-brand" })
                }
            </div>
            <div class="navbar-collapse collapse">
                <ul class="nav navbar-nav">
                    @if (Session["UserModel"] != null)
                    {
                        <li>@Html.ActionLink("Home", "Index", "Home")</li>

                        if (((VendeeCrop.Models.UserModel)Session["UserModel"]).Type == "Farmer" || Request.IsAuthenticated)
                        {
                            <li>@Html.ActionLink("My Posts", "Index", "CropPost")</li>
                        }
                    }
                    @*<li>@Html.ActionLink("About", "About", "Home")</li>
                        <li>@Html.ActionLink("Contact", "Contact", "Home")</li>*@
                    @if (Request.IsAuthenticated)
                    {
                        <li class="dropdown">
                            <a class="dropdown-toggle" data-toggle="dropdown" href="#">
                                Crops
                                <span class="caret"></span>
                            </a>
                            <ul class="dropdown-menu">
                                <li>@Html.ActionLink("Crop List", "Index", "Crop")</li>
                                <li>@Html.ActionLink("Crop Types", "Index", "CropType")</li>
                            </ul>
                        </li>
                        @*<li>@Html.ActionLink("Buyers", "Index", "BuyerModels")</li>*@
                        @*<li>@Html.ActionLink("Farmers", "Index", "FarmerModels")</li>*@
                        <li class="dropdown">
                            <a class="dropdown-toggle" data-toggle="dropdown" href="#">
                                Users
                                <span class="caret"></span>
                            </a>
                            <ul class="dropdown-menu">
                                <li>@Html.ActionLink("Pending For Approval", "ForApproval", "Users")</li>
                                <li><a href="@Url.Action("Index","Users",routeValues: new { id = "Buyer" })">All Buyers</a></li>
                                <li><a href="@Url.Action("Index","Users",routeValues: new { id = "Farmer" })">All Farmers</a></li>
                            </ul>
                        </li>
                        
                        @*<li>@Html.ActionLink("Farmers", "Index", "FarmerModels")</li>*@
                    }

                </ul>
                @Html.Partial("_LoginPartial")
            </div>
        </div>
    </div>
    <div class="container body-content">
        @RenderBody()
        <hr />
        <footer>
            <p>&copy; @DateTime.Now.Year - Vendee Crop</p>
        </footer>
        @*<input type="hidden" value="" />*@
    </div>




    
    <script type="text/javascript">
        var notificationType = "";
        var fromId = '@(Session["UserModel"] == null ? 0 : (((VendeeCrop.Models.UserModel)Session["UserModel"]).Id))';
        var myUserId = '@(Session["UserModel"] == null ? 0 : (((VendeeCrop.Models.UserModel)Session["UserModel"]).Id))';
        var toId = "";
        var chat;
        var IsOnMessages = false;
        $(function () {
            chat = $.connection.communicationR;
            chat.client.addNewMessageToPage = function (type, from, to, message) {
                //console.log("Type: " + type + ",From: " + from + ",To: " + to + ", Message: " + message);
                
                if (type == "Message") {
                    var unreadMessageCount = parseInt($("#lblMessageCountLeft").html());
                    if (!IsOnMessages) {
                        unreadMessageCount = unreadMessageCount + 1;
                        if (unreadMessageCount > 0) {
                            $("#lblMessageCountLeft").removeClass("hidden");
                            $("#lblMessageCountRight").removeClass("hidden");
                        }
                        $("#lblMessageCountLeft").html(unreadMessageCount);
                        $("#lblMessageCountRight").html(unreadMessageCount);
                        hasnotification = true;
                    } else {
                        MessageReceived(from, to, message);
                        //console.log(!(to != myUserId && from != myUserId))
                        if ((to != myUserId && from != myUserId)) {
                            unreadMessageCount += 1;
                            if (unreadMessageCount > 0) {
                                $("#lblMessageCountLeft").removeClass("hidden");
                                $("#lblMessageCountRight").removeClass("hidden");
                            }
                            $("#lblMessageCountLeft").html(unreadMessageCount);
                            $("#lblMessageCountRight").html(unreadMessageCount);
                            hasnotification = true;
                        }
                    }

                } else if (type == "Notification") {

                }




                //var unreadNotificationCount = parseInt($("#lblNotificationCountLeft").html());
                
                //if (type == "Message") {
                //    //message notification
                //    if ($("#divmessages")) {
                //        MessageReceived(from, to, message);
                //    }
                //}

                //unreadNotificationCount += 1;
                //if (unreadNotificationCount > 0) {
                //    $("#lblNotificationCountLeft").removeClass("hidden");
                //    $("#lblNotificationCountRight").removeClass("hidden");
                //}
                //$("#lblNotificationCountLeft").html(unreadNotificationCount);
                //$("#lblNotificationCountRight").html(unreadNotificationCount);
            }


            $.connection.hub.start().done(function () {
                $('#sendmessage').click(function () {
                    chat.server.send(notificationType, fromId, toId, $("#myMessage").val());
                });

                function sendrealtime() {
                    chat.server.send(notificationType, fromId, toId, $("#myMessage").val());
                }
            })

            $.ajax({
                url: "/Home/GetMessagesNotificationCount",
                cache: false,
                type: "GET",
                success: function (count) {
                    var unreadMessageCount = parseInt($("#lblMessageCountLeft").html());
                    unreadMessageCount = count;
                    if (unreadMessageCount > 0) {
                        $("#lblMessageCountLeft").removeClass("hidden");
                        $("#lblMessageCountRight").removeClass("hidden");
                    }
                    $("#lblMessageCountLeft").html(unreadMessageCount);
                    $("#lblMessageCountRight").html(unreadMessageCount);
                },
                error: function (request, status, error) {
                    //alert("an error occurred: " + error);
                }
            })



        });



    </script>
</body>
</html>
